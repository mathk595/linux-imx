/*
 * Copyright 2020 Keith & Koep GmbH
 */

/*
Switches:
    TRIZEPS8MINI_V1R1                   Use V1R1 (engineering sample), whcih use GPIO1_2 as Reset instead of Watchdog-Reset                      			

    TRIZEPS8MINI_USDHC1_VQMMC_MCU	For UHS: Control VQMMC voltage of internal uSD-Card.
    TRIZEPS8MINI_USDHC2_VQMMC_MCU	For UHS: Control VQMMC voltage of external uSD-Card. 
    There is only one VQMMC-switch on the Trizeps module. 

    Module with eMMC:   	      	VQMMC of eMMC fixed to +1V8 and VQMMC of ext. uSD fixed to +3V3   
                        		Special mounting exist to switch ext. uSD voltage: Use TRIZEPS8MINI_USDHC2_VQMMC_MCU in that case.
			
    Module with uSD:			VQMMC of int. uSD switchable (+3V3/+1V8) and VQMMC of ext. uSD fixed to +3V3. 
                        		May use TRIZEPS8MINI_USDHC1_VQMMC_MCU to allow UHS.
    
    ETHERNET_ONLY_100MBIT		Reduce Ethernet to 100MBit in case extra lanes for 1GBit are not connected on the baseboard.

    TRIZEPS8MINI_BT_SCO_XTOR		Special audio-driver for Bluetooth.

*/

#include "imx8mm.dtsi"
#include "trizeps8mini-pinfunc.h"

/ {
	memory@40000000 {
		device_type = "memory";
		reg = <0x0 0x40000000 0 0x80000000>;
	};
};

&A53_0 {
	cpu-supply = <&buck2_reg>;
};

&A53_1 {
	cpu-supply = <&buck2_reg>;
};

&A53_2 {
	cpu-supply = <&buck2_reg>;
};

&A53_3 {
	cpu-supply = <&buck2_reg>;
};


&snvs_pwrkey {
	status = "disabled";
};

&uart1 { /* FFUART */
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart1>;
	assigned-clocks = <&clk IMX8MM_CLK_UART1>;
	assigned-clock-parents = <&clk IMX8MM_SYS_PLL1_80M>;
	fsl,uart-has-rtscts;
	status = "okay";
};


&usdhc1 {
	pinctrl-names = "default", "state_100mhz", "state_200mhz";
	pinctrl-0 = <&pinctrl_usdhc1>, <&pinctrl_usdhc1_gpio>;
	pinctrl-1 = <&pinctrl_usdhc1_100mhz>, <&pinctrl_usdhc1_gpio>;
	pinctrl-2 = <&pinctrl_usdhc1_200mhz>, <&pinctrl_usdhc1_gpio>;
	bus-width = <8>;
//	vmmc-supply = <&reg_usdhc1_vmmc>;
	non-removable;
#if defined(TRIZEPS8MINI_USDHC1_VQMMC_MCU) && (TRIZEPS8MINI_USDHC1_VQMMC_MCU==1)
    vqmmc-supply = <&mcutouch>;
#else
    no-1-8-v;    
#endif
	status = "okay";
};


&wdog1 {
#if  !defined(TRIZEPS8MINI_V1R1) && (TRIZEPS8MINI_V1R1==0)    
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_wdog>;
	fsl,ext-reset-output;
#endif    
	status = "okay";
};

&i2c3 { /* Internal I2C */
	clock-frequency = <100000>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_i2c3>;
	status = "okay";

	pmic@4b {
		compatible = "rohm,bd71847";
		reg = <0x4b>;
		rohm,reset-snvs-powered;

		regulators {
			buck1_reg: BUCK1 {  // VDD_SOC_0V8
				regulator-name = "BUCK1";
				regulator-min-microvolt = <700000>;
				regulator-max-microvolt = <1300000>;
				regulator-boot-on;
				regulator-always-on;
				regulator-ramp-delay = <1250>;
			};

			buck2_reg: BUCK2 {  // VDD_SOC_0V9
				regulator-name = "BUCK2";
				regulator-min-microvolt = <700000>;
				regulator-max-microvolt = <1300000>;
				regulator-boot-on;
				regulator-always-on;
				regulator-ramp-delay = <1250>;
				rohm,dvs-run-voltage = <1000000>;
				rohm,dvs-idle-voltage = <900000>;
			};

			buck3_reg: BUCK3 {  // VDD_DRAM_PU_0V9
				// BUCK5 in datasheet
				regulator-name = "BUCK3";
				regulator-min-microvolt = <700000>;
				regulator-max-microvolt = <1350000>;
				regulator-boot-on;
				regulator-always-on;
			};

			buck4_reg: BUCK4 {  // +3V3_AUX
				// BUCK6 in datasheet
				regulator-name = "BUCK4";
				regulator-min-microvolt = <3000000>;
				regulator-max-microvolt = <3300000>;
				regulator-boot-on;
				regulator-always-on;
			};

			buck5_reg: BUCK5 {  // VDD_1V8
				// BUCK7 in datasheet
				regulator-name = "BUCK5";
				regulator-min-microvolt = <1605000>;
				regulator-max-microvolt = <1995000>;
				regulator-boot-on;
				regulator-always-on;
			};

			buck6_reg: BUCK6 {  // NVCC_DRAM_1V1
				// BUCK8 in datasheet
				regulator-name = "BUCK6";
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <1400000>;
				regulator-boot-on;
				regulator-always-on;
			};

			ldo1_reg: LDO1 {    // NVCC_SNVS_1V8
				regulator-name = "LDO1";
				regulator-min-microvolt = <1600000>;
				regulator-max-microvolt = <1900000>;
				regulator-boot-on;
				regulator-always-on;
			};

			ldo2_reg: LDO2 {    // VDD_SNVS_0V8
				regulator-name = "LDO2";
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <900000>;
				regulator-boot-on;
				regulator-always-on;
			};

			ldo3_reg: LDO3 {    // VDDA_1V8
				regulator-name = "LDO3";
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <3300000>;
				regulator-boot-on;
				regulator-always-on;
			};

			ldo4_reg: LDO4 {    // VDD_PHY_0V9
				regulator-name = "LDO4";
				regulator-min-microvolt = <900000>;
				regulator-max-microvolt = <1800000>;
				regulator-boot-on;
				regulator-always-on;
			};

			ldo5_reg: LDO5 {    // VDD_FPGA_MIPI
				regulator-name = "LDO5";
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <3300000>;
				regulator-boot-on;
				regulator-always-on;
			};

			ldo6_reg: LDO6 {    // VDD_PHY_1V2
				regulator-name = "LDO6";
				regulator-min-microvolt = <900000>;
				regulator-max-microvolt = <1800000>;
				regulator-boot-on;
				regulator-always-on;
			};
		};
	};
};


&iomuxc {
	pinctrl-names = "default";

	pinctrl_i2c3: i2c3grp {
		fsl,pins = <
			MX8MM_IOMUXC_I2C3_SCL_I2C3_SCL			0x400001c3
			MX8MM_IOMUXC_I2C3_SDA_I2C3_SDA			0x400001c3
		>;
	};



	pinctrl_uart1: uart1grp {
		fsl,pins = <
			MX8MM_IOMUXC_UART1_RXD_UART1_DCE_RX	0x140
			MX8MM_IOMUXC_UART1_TXD_UART1_DCE_TX	0x140
		>;
	};

	pinctrl_usdhc1_gpio: usdhc1grpgpio {
		fsl,pins = <
			MX8MM_IOMUXC_SD1_RESET_B_USDHC1_RESET_B	0xc1
		>;
	};

		pinctrl_usdhc1: usdhc1grp {
			fsl,pins = <
				MX8MM_IOMUXC_SD1_CLK_USDHC1_CLK		0x190
				MX8MM_IOMUXC_SD1_CMD_USDHC1_CMD		0x1d0
				MX8MM_IOMUXC_SD1_DATA0_USDHC1_DATA0	0x1d0
				MX8MM_IOMUXC_SD1_DATA1_USDHC1_DATA1	0x1d0
				MX8MM_IOMUXC_SD1_DATA2_USDHC1_DATA2	0x1d0
				MX8MM_IOMUXC_SD1_DATA3_USDHC1_DATA3	0x1d0
				MX8MM_IOMUXC_SD1_DATA4_USDHC1_DATA4	0x1d0
				MX8MM_IOMUXC_SD1_DATA5_USDHC1_DATA5	0x1d0
				MX8MM_IOMUXC_SD1_DATA6_USDHC1_DATA6	0x1d0
				MX8MM_IOMUXC_SD1_DATA7_USDHC1_DATA7	0x1d0
				MX8MM_IOMUXC_SD1_STROBE_USDHC1_STROBE	0x190			
			>;
		};

		pinctrl_usdhc1_100mhz: usdhc1grp100mhz {
			fsl,pins = <
				MX8MM_IOMUXC_SD1_CLK_USDHC1_CLK		0x194
				MX8MM_IOMUXC_SD1_CMD_USDHC1_CMD		0x1d4
				MX8MM_IOMUXC_SD1_DATA0_USDHC1_DATA0	0x1d4
				MX8MM_IOMUXC_SD1_DATA1_USDHC1_DATA1	0x1d4
				MX8MM_IOMUXC_SD1_DATA2_USDHC1_DATA2	0x1d4
				MX8MM_IOMUXC_SD1_DATA3_USDHC1_DATA3	0x1d4
				MX8MM_IOMUXC_SD1_DATA4_USDHC1_DATA4	0x1d4
				MX8MM_IOMUXC_SD1_DATA5_USDHC1_DATA5	0x1d4
				MX8MM_IOMUXC_SD1_DATA6_USDHC1_DATA6	0x1d4
				MX8MM_IOMUXC_SD1_DATA7_USDHC1_DATA7	0x1d4
				MX8MM_IOMUXC_SD1_STROBE_USDHC1_STROBE	0x194
			>;
		};

		pinctrl_usdhc1_200mhz: usdhc1grp200mhz {
			fsl,pins = <
				MX8MM_IOMUXC_SD1_CLK_USDHC1_CLK		0x196
				MX8MM_IOMUXC_SD1_CMD_USDHC1_CMD		0x1d6
				MX8MM_IOMUXC_SD1_DATA0_USDHC1_DATA0	0x1d6
				MX8MM_IOMUXC_SD1_DATA1_USDHC1_DATA1	0x1d6
				MX8MM_IOMUXC_SD1_DATA2_USDHC1_DATA2	0x1d6
				MX8MM_IOMUXC_SD1_DATA3_USDHC1_DATA3	0x1d6
				MX8MM_IOMUXC_SD1_DATA4_USDHC1_DATA4	0x1d6
				MX8MM_IOMUXC_SD1_DATA5_USDHC1_DATA5	0x1d6
				MX8MM_IOMUXC_SD1_DATA6_USDHC1_DATA6	0x1d6
				MX8MM_IOMUXC_SD1_DATA7_USDHC1_DATA7	0x1d6
				MX8MM_IOMUXC_SD1_STROBE_USDHC1_STROBE	0x196
			>;
		};

	pinctrl_wdog: wdoggrp {
		fsl,pins = <
			MX8MM_IOMUXC_GPIO1_IO02_WDOG1_WDOG_B	0xc6
		>;
	};        
};

&lcdif {
	status = "okay";
};

&vpu_g1 {
	status = "okay";
};

&vpu_g2 {
	status = "okay";
};

&vpu_h1 {
	status = "okay";
};

&vpu_v4l2 {
	status = "okay";
};

&gpu {
	status = "okay";
};
